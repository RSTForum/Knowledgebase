{
	"info": {
		"_postman_id": "2fabcf2b-32da-45c0-99f1-97ba8c99ec3f",
		"name": "RSTForum NSO API Requests",
		"description": "This only covers a sub-set of the RESTCONF Northbound API, since auto-generated swagger from the application is 200,000 lines of documentation.\n\nCreated using https://github.com/NSO-developer/nso-vagrant as a localhost NSO testing environment.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "NSO Device Manager",
			"item": [
				{
					"name": "Adding / Removing a Device",
					"item": [
						{
							"name": "Step 0. Create a Device in the CDB",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/yang-data+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/yang-data+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n<!--\nSample CLI to do the same thing\ndevices device ios0 authgroup default port 10022 device-type cli ned-id cisco-ios-cli-6.42\nstate admin-state unlocked\n-->\n\n\n<device>\n <name>RST</name>\n <address>127.0.0.1</address>\n <port>10022</port>\n <authgroup>XR</authgroup>\n <device-type>\n   <cli>\n     <ned-id xmlns:cisco-iosxr-cli-7.18=\"http://tail-f.com/ns/ned-id/cisco-iosxr-cli-7.18\">cisco-iosxr-cli-7.18:cisco-iosxr-cli-7.18</ned-id>\n   </cli>\n </device-type>\n <state>\n   <admin-state>unlocked</admin-state>\n </state>\n</device>\n      ",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices"
									]
								},
								"description": "Update the Payload with correct info. Sample XML can be used from Get on existing device or using commit dry run on CLI. Device names, NED-ID, Address and Ports will likely be different depending on your environment."
							},
							"response": []
						},
						{
							"name": "Step 1. SSH Fetch-Host-Keys Device",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/yang-data+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device={{sample_xr_device}}/ssh/fetch-host-keys",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device={{sample_xr_device}}",
										"ssh",
										"fetch-host-keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 2. Sync-from Device",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/yang-data+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device=PE1/sync-from",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device=PE1",
										"sync-from"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a device from CDB Device List",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/yang-data+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device={{sample_device}}",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device={{sample_device}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "View Device Config",
					"item": [
						{
							"name": "All Devices in Device List: Show Running-config Devices Device",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/yang-data+json"
									}
								],
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device"
									]
								},
								"description": "Note: This can be a very large payload, since it is sending the parsed running config of every single device in the device list, and the NSO application configuration."
							},
							"response": []
						},
						{
							"name": "Single Device Config - Show devices device DEVICENAME",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/yang-data+json"
									}
								],
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device={{sample_xr_device}}",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device={{sample_xr_device}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Device HW / SW Platform Info",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/yang-data+json"
									}
								],
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device={{sample_xr_device}}/platform",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device={{sample_xr_device}}",
										"platform"
									]
								}
							},
							"response": []
						},
						{
							"name": "show interfaces",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/yang-data+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device={{sample_xr_device}}/config/tailf-ned-cisco-ios-xr:interface/",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device={{sample_xr_device}}",
										"config",
										"tailf-ned-cisco-ios-xr:interface",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "show interface eth 0/0",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/yang-data+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device={{sample_xr_device}}/config/tailf-ned-cisco-ios-xr:interface/GigabitEthernet=0%2F0%2F0%2F1",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device={{sample_xr_device}}",
										"config",
										"tailf-ned-cisco-ios-xr:interface",
										"GigabitEthernet=0%2F0%2F0%2F1"
									]
								}
							},
							"response": []
						}
					],
					"description": "If device config is very nested, you can use the depth=X parameter to see additional hidden layers of nesting.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4d493047-4820-452f-9b6d-113cb8c504f3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eae08c47-ee50-4abc-9322-b7388e00a7fb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Device Config Management",
					"item": [
						{
							"name": "add ip address to interface",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/yang-data+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/yang-data+xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n                       <ipv4>\n                         <address>\n                           <ip>50.50.50.50</ip>\n                           <mask>255.255.255.255</mask>\n                         </address>\n                       </ipv4>\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device={{sample_xr_device}}/config/tailf-ned-cisco-ios-xr:interface/Loopback=1/ipv4",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device={{sample_xr_device}}",
										"config",
										"tailf-ned-cisco-ios-xr:interface",
										"Loopback=1",
										"ipv4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove SNMP Community String from Device",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/yang-data+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/yang-data+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device={{sample_xr_device}}/config/tailf-ned-cisco-ios-xr:snmp-server",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device={{sample_xr_device}}",
										"config",
										"tailf-ned-cisco-ios-xr:snmp-server"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add SNMP Community String",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/yang-data+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/yang-data+xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n                     <community>\n                       <name>RSTForum</name>\n                       <RO/>\n                     </community>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device={{sample_xr_device}}/config/tailf-ned-cisco-ios-xr:snmp-server/community",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device={{sample_xr_device}}",
										"config",
										"tailf-ned-cisco-ios-xr:snmp-server",
										"community"
									],
									"query": [
										{
											"key": "dry-run",
											"value": "native",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove IP Address From Interface",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/yang-data+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/yang-data+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device={{sample_xr_device}}/config/tailf-ned-cisco-ios-xr:interface/GigabitEthernet=0%2F0%2F0%2F0/ipv4/address",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device={{sample_xr_device}}",
										"config",
										"tailf-ned-cisco-ios-xr:interface",
										"GigabitEthernet=0%2F0%2F0%2F0",
										"ipv4",
										"address"
									],
									"query": [
										{
											"key": "dry-run",
											"value": "native",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Dry-run Remove SNMP Community String from Device",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/yang-data+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/yang-data+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device={{sample_xr_device}}/config/tailf-ned-cisco-ios-xr:snmp-server?dry-run=native",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device={{sample_xr_device}}",
										"config",
										"tailf-ned-cisco-ios-xr:snmp-server"
									],
									"query": [
										{
											"key": "dry-run",
											"value": "native"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Any element of device configuration modeled in NSO can be configured over the API. The ones given here are just samples. NSO will translate it to the correct commands and can rollback if needed. ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "11b0b5cc-7fb6-47b8-959d-58a4fc79d921",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "88c3e937-5de3-47b1-b84a-16bb9362d1ef",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Commit Dry-Run and Rollbacks",
					"item": [
						{
							"name": "Commit Dry-run outformat native",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/yang-data+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/yang-data+xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n                       <ipv4>\n                         <address>\n                           <ip>50.50.50.50</ip>\n                           <mask>255.255.255.255</mask>\n                         </address>\n                       </ipv4>\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device={{sample_xr_device}}/config/tailf-ned-cisco-ios-xr:interface/Loopback=1/ipv4?dry-run=native",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device={{sample_xr_device}}",
										"config",
										"tailf-ned-cisco-ios-xr:interface",
										"Loopback=1",
										"ipv4"
									],
									"query": [
										{
											"key": "dry-run",
											"value": "native"
										}
									]
								},
								"description": "This is using an example for an IOS interface, with the configuration in the payload, but could be any config. The key thing is having the query params ?dry-run=native so NSO knows to not commit it and to respond back with the dry-run data in CLI format."
							},
							"response": []
						},
						{
							"name": "Dry Run Rollback: Getting back to current state if commit success",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/yang-data+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/yang-data+xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n                      <ipv4>\n                         <address>\n                           <ip>50.50.50.50</ip>\n                           <mask>255.255.255.255</mask>\n                         </address>\n                       </ipv4>"
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device={{sample_xr_device}}/config/tailf-ned-cisco-ios-xr:interface/Loopback=1/ipv4?dry-run-reverse=native&dry-run=native",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device={{sample_xr_device}}",
										"config",
										"tailf-ned-cisco-ios-xr:interface",
										"Loopback=1",
										"ipv4"
									],
									"query": [
										{
											"key": "dry-run-reverse",
											"value": "native"
										},
										{
											"key": "dry-run",
											"value": "native"
										}
									]
								},
								"description": "This API example uses the following params:\n?dry-run-reverse=native&dry-run=native\nwhich tells NSO not to make a commit, by doing a dry-run, and give the response in the payload return with native CLI syntax. \nIt will calculate behind the scenes based on the payload sent to NSO what it would take to roll that particular payload back, if the commit was succesful. Basically like a dry-run rollback."
							},
							"response": []
						},
						{
							"name": "Commit-Dry Run Remove IP address from interface",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/yang-data+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/yang-data+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device={{sample_xr_device}}/config/tailf-ned-cisco-ios-xr:interface/Loopback=1/ipv4?dry-run=native",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device={{sample_xr_device}}",
										"config",
										"tailf-ned-cisco-ios-xr:interface",
										"Loopback=1",
										"ipv4"
									],
									"query": [
										{
											"key": "dry-run",
											"value": "native"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Commit dry-run is NSO not making any change to the device, but telling you what the proposed change will be based on what is already existing on the device, calculating the difference. Rollbacks are when NSO calculates the minimum number of commands to return it to the previous state of configuration before the NSO commit transaction. ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "76843dd7-71d7-4aa8-8c37-83493a23bba0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "79523775-b9da-4c01-b357-b494cb899be4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Device Config Templates",
					"item": [
						{
							"name": "1. Create a DNS Server Configuration Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44a653b7-a39e-4843-a5b2-167696d20c39",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/yang-data+xml"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Accept",
										"value": "application/yang-data+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n             <devices>\n               <template>\n                 <name>Standard_DNS_Servers</name>\n                 <ned-id>\n                   <id>cisco-iosxr-cli-7.18:cisco-iosxr-cli-7.18</id>\n                   <config>\n                     <domain>\n                       <name-server>\n                           <address>8.8.8.8</address>\n                       </name-server>\n                     </domain>\n                   </config>\n                 </ned-id>\n               </template>\n             </devices>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										""
									]
								},
								"description": "sample CLI to do the same:\ndevices template Standard_DNS_Servers\nned-id cisco-ios-cli-6.42\nconfi\nip name-server name-server-list 8.8.8.8\nexit\nexit\nexit\nned-id cisco-nx-cli-5.13 config\nip name-server servers 8.8.8.8"
							},
							"response": []
						},
						{
							"name": "2. Apply DNS Server Device Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c612c3d-28ff-4528-b56f-f715f711c198",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/yang-data+xml"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/yang-data+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<!--\ncli for same config\nconf\ndevices device ios0 apply-template template-name Standard_DNS_Servers\n-->\n\n<input>\n\t<template-name>Standard_DNS_Servers</template-name>\n</input>\n\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device={{sample_xr_device}}/apply-template/",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device={{sample_xr_device}}",
										"apply-template",
										""
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "NSO Device Groups",
					"item": [
						{
							"name": "Configure Device Groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9205cdb0-a641-49d9-892d-37763f07abc6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/yang-data+xml"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/yang-data+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n             <devices>\n               <device-group>\n                 <name>backbone-devices</name>\n                 <device-name>PE1</device-name>\n                 <device-name>PE2</device-name>\n               </device-group>\n               <device-group>\n                 <name>campus-devices</name>\n                 <device-name>CE1</device-name>\n                 <device-name>CE2</device-name>\n               </device-group>\n               <device-group>\n                 <name>parent-group-all-devices</name>\n                 <device-group>backbone-devices</device-group>\n                 <device-group>campus-devices</device-group>\n               </device-group>\n             </devices>\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices"
									]
								},
								"description": "Groups are useful for organizing your devices in a way\nthat makes sense to you.\n\nDevices can be a member of more than one group,\nand device groups can be nested.\n\nCLI Equivalent\n\ndevices device-group campus-devices device-name [ ios0 nx0 ]\ntop\ndevices device-group backbone-devices device-name [ iosxr0 asa0 ]\ntop\ndevices device-group parent-group-all-devices device-group [ campus-devices backbone-devices ]\ncommit dry-run\ncommit dry-run outformat xml\ntop"
							},
							"response": []
						},
						{
							"name": "List Device Groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdd1d376-34c9-4f0c-98e5-31b49a8e2833",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/yang-data+json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/yang-data+json"
									},
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device-group",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device-group"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Device Single Device Group Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67f5e17f-6f9b-4833-bd3a-7dfc9fc8dd1d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/yang-data+json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Accept",
										"value": "application/yang-data+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:devices/device-group=backbone-devices",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:devices",
										"device-group=backbone-devices"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Config Compliance Reporting",
					"item": [
						{
							"name": "Configure DNS Server Compliance Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2569cc40-0d2c-4db7-b69a-dd8cc78ed67f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/yang-data+xml"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/yang-data+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "             <compliance>\n               <reports>\n                 <report>\n                   <name>DNS_Servers_Configured</name>\n                   <compare-template>\n                     <template-name>Standard_DNS_Servers</template-name>\n                     <device-group>XR</device-group>\n                   </compare-template>\n                 </report>\n               </reports>\n             </compliance>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:compliance",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:compliance"
									]
								},
								"description": "This compliance report uses the device config template Standard_DNS_Servers to see if the device has a DNS server of 8.8.8.8, only for IOS devices. If non-IOS devices are applied, they are ignored. "
							},
							"response": []
						},
						{
							"name": "Run Compliance Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eea3eaa7-51a2-42d9-8ad9-c4f1b072222f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/yang-data+xml"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/yang-data+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<input>\n\t<outformat>html</outformat>\n</input>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:compliance/reports/report=DNS_Servers_Configured/run",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:compliance",
										"reports",
										"report=DNS_Servers_Configured",
										"run"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Simple Sample SNMP Server Service",
					"item": [
						{
							"name": "Update an Existing Service Instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "882e4adb-ad59-4dc0-89f4-7769eae186b2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/yang-data+xml"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Accept",
										"value": "application/yang-data+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<!--\n\nCLI Equivalent\n\nadmin@ncs(config)# simple-sample-snmp-server-service first_service_instance device ios0 dummy 10.0.0.0\nadmin@ncs(config-simple-sample-snmp-server-service-first_service_instance)# commit dry-run outformat native\nnative {\n    device {\n        name ios0\n        data snmp-server host 10.0.0.1 traps NSO-COMM-STRING\n    }\n}\n-->\n             <RST-Radius>\n               <Region>EMEA</Region>\n               <ip-address>100.100.100.101</ip-address>\n               <device>CE1</device>\n             </RST-Radius>"
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:services/RST-Radius:RST-Radius/",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:services",
										"RST-Radius:RST-Radius",
										""
									]
								},
								"description": "This example changes the dummy IP input from 10.0.0.0 to 10.0.0.1, so the new server will be deployed to ios0"
							},
							"response": []
						},
						{
							"name": "Get List of Service Instances for a Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b55f9f96-afd0-4d05-ad2e-820b28bd1c30",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/yang-data+xml"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Accept",
										"value": "application/yang-data+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/simple-sample-snmp-server-service:simple-sample-snmp-server-service",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"simple-sample-snmp-server-service:simple-sample-snmp-server-service"
									]
								},
								"description": "Note: this will only have data if service instances already exist.\nShows all service instances. In this case we have just one. \nCLI version:\nadmin@ncs# show running-config simple-sample-snmp-server-service\nsimple-sample-snmp-server-service first_service_instance\n device [ ios0 ]\n dummy  10.0.0.0"
							},
							"response": []
						},
						{
							"name": "Get Service Info For Single Service Instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6573acbe-e377-4edf-9c80-02fa8375a228",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/yang-data+xml"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Accept",
										"value": "application/yang-data+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:services/RST-Radius:RST-Radius=EMEA",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:services",
										"RST-Radius:RST-Radius=EMEA"
									]
								},
								"description": "Note: this will only have data if service instances already exist.\nCLI version to do the same:\nadmin@ncs# show running-config simple-sample-snmp-server-service first_service_instance"
							},
							"response": []
						},
						{
							"name": "Remove Device from Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e5279b3-b0f8-4439-bcca-8de4a4eb17a4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/yang-data+xml"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Accept",
										"value": "application/yang-data+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data/tailf-ncs:services/RST-Radius:RST-Radius=EMEA",
									"protocol": "http",
									"host": [
										"{{NSO_IP}}"
									],
									"port": "{{NSO_HTTP_PORT}}",
									"path": [
										"restconf",
										"data",
										"tailf-ncs:services",
										"RST-Radius:RST-Radius=EMEA"
									]
								},
								"description": "This will remove any configuration template based on the inputs stored in the service. \nCLI way of doing the same thing:\nno simple-sample-snmp-server-service first_service_instance"
							},
							"response": []
						}
					],
					"description": "NSO allows you to create any service, with any inputs, to enforce any config, for any devices. \n\nHere is a simple service for use on IOS devices, where the default yang input of an IP address input called \"dummy\" is used, and then a simple SNMP config is using that input to render and apply config.\n\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "67b893ca-ec2f-4445-a7fd-670f1eabf74a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d4d26aff-45a2-4717-a703-49440ffa20b1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "note the key for show interface with 0/0 replace / with 0%2F0",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3dc56740-a2d0-4c5c-9891-a0ea059837c7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "148ae239-3971-48c2-b347-79d3d55c3476",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "NSO Root of the App Hierarchy Level Queries",
			"item": [
				{
					"name": "Root Level NSO JSON Returned",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/yang-data+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{NSO_IP}}:{{NSO_HTTP_PORT}}/restconf/data",
							"protocol": "http",
							"host": [
								"{{NSO_IP}}"
							],
							"port": "{{NSO_HTTP_PORT}}",
							"path": [
								"restconf",
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Level NSO XML returned",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/yang-data+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8009/restconf/data",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8009",
							"path": [
								"restconf",
								"data"
							]
						}
					},
					"response": []
				}
			],
			"description": "Note: Root level queries have different headers than other queries. Return All Application and Device Config.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3d612f48-34cf-423f-a88d-dc33898d02b2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6a1fa9de-eca4-4661-8f60-9ba33315bff1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{username}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f9c5562a-7d4d-4770-876e-5bcc22e91e1e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d914e315-d4f8-43ce-b463-df1f535c82d4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "fadd9bdb-8a80-47e9-ba42-b642d8e4e409",
			"key": "NSO_IP",
			"value": "127.0.0.1"
		},
		{
			"id": "acff459a-5d6a-431b-8573-4824968ae8f7",
			"key": "NSO_HTTP_PORT",
			"value": "8080"
		},
		{
			"id": "d67daa10-aeba-4d2c-8f60-3b52c0a3988d",
			"key": "username",
			"value": "admin"
		},
		{
			"id": "1fe13930-b599-4702-8846-17f3a2a5ccbc",
			"key": "password",
			"value": "admin"
		},
		{
			"id": "9a4a1ace-1633-41f2-b1f1-3efce619bade",
			"key": "sample_ios_device",
			"value": "ios0"
		},
		{
			"id": "8df379f5-4b82-42e9-880c-2308b1877ceb",
			"key": "sample_xr_device",
			"value": "iosxr0"
		},
		{
			"id": "b29c7795-4a7b-4308-ae6c-d35c88c27b39",
			"key": "sample_junos_device",
			"value": "junos0"
		},
		{
			"id": "fe55b674-516c-4541-aa04-5a2ab117534f",
			"key": "sample_device",
			"value": "RST"
		}
	],
	"protocolProfileBehavior": {}
}